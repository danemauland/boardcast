org: danemauland
app: boardcast
service: boardcast-frontend

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs16.x
  region: us-east-1
  logRetentionInDays: 30
  logs:
    httpApi: true
  apiGateway:
    restApiId: ${cf:${self:custom.restAPIStack}.ApiGatewayRestApi}
    restApiRootResourceId: ${cf:${self:custom.restAPIStack}.ApiGatewayRestApiRootId}
  environment:
    STAGE: ${sls:stage}
    REGION: ${self:provider.region}
    SERVICE_NAME: ${self:service}
    # API_GW_DOMAIN: !Ref ApiGatewayRestApi
    API_GW_URL:
      Fn::Join:
          - ""
          - - https://${cf:${self:custom.restAPIStack}.ApiGatewayRestApi}.execute-api.
            - Ref: AWS::Region
            - .amazonaws.com/
            - ${sls:stage}
    WEBSOCKET_DOMAIN: ${cf:${self:custom.wsStack}.APIGWWebsocketApi}
    APP_DIST_URL: ${self:custom.distBucketUrl}
    DDB_TABLE: ${cf:${self:custom.infraStack}.DDBTableMeeting}
    USER_POOL: ${cf:${self:custom.infraStack}.CogUserPoolID}
    CLIENT_ID: ${cf:${self:custom.infraStack}.CogUserPoolClientID}
    DOMAIN_SUFFIX: ${cf:${self:custom.infraStack}.DomainSuffix}
    S3_BUCKET: ${cf:${self:custom.infraStack}.S3BucketMeetingAttachments}
    KINESIS_ROLE: ${cf:${self:custom.infraStack}.IAMRoleKinesisVideoArn}

custom:
  appName: boardcast
  wsStack: ${self:custom.appName}-websocket-${sls:stage}
  infraStack: ${self:custom.appName}-infra-${sls:stage}
  restAPIStack: ${self:custom.appName}-restapi-${sls:stage}
  awsAccountId: ${cf:${self:custom.infraStack}.AWSAccountId}
  distBucketUrl:
    Fn::Join:
        - ""
        - - https://
          - Ref: DistBucket
          - .s3.amazonaws.com
  esbuild:
    bundle: true
    target: es2018
    exclude: []
  export-env:
    overwrite: true
  scripts:
    hooks:
      package:initialize: "npm run build:browser"
  s3Sync:
    - bucketNameKey: DistBucket
      localDir: dist
      acl: public-read
      params:
        - "*.js":
            # CacheControl: 'public, max-age=31104000' # 1 year
            CacheControl: 'no-cache'
  serverless-offline:
    useChildProcesses: true
    noPrependStageInUrl: false
    httpPort: 3000
    lambdaPort: 3002
  webpack:
    webpackConfig: "webpack.server.config.js"


package:
  individually: true
  patterns:
    - '!node_modules/**'

functions:
  # =============================================================
  # API Gateway handlers
  # =============================================================

  APIGWServe:
    handler: src/handlers/serve.handler
    events:
      - http:
          path: /
          method: get
          cors: true
      - http:
          path: /{any+}
          method: get
          cors: true
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamoDB:UpdateItem
      Resource:
        - ${cf:${self:custom.infraStack}.DDBTableMeetingArn}

resources:
  Resources:
    DistBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Delete
      Properties:
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - "GET"
              AllowedOrigins:
                - Fn::Join:
                    - ""
                    - - https://${cf:${self:custom.restAPIStack}.ApiGatewayRestApi}.execute-api.
                      - Ref: AWS::Region
                      - .amazonaws.com
  
  Outputs:
    DistBucket:
      Description: Distribution S3 Bucket
      Value:
        Ref: DistBucket

plugins:
- serverless-esbuild
- serverless-export-env
- serverless-plugin-scripts
- serverless-s3-sync
- serverless-iam-roles-per-function
- serverless-offline